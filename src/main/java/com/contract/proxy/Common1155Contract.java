package com.contract.proxy;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Array;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.2.
 */

@SuppressWarnings("rawtypes")
public class Common1155Contract extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b506004361061018d5760003560e01c806391d14854116100de578063d539139311610097578063e985e9c511610071578063e985e9c51461048e578063f242432a146104be578063f5298aca146104da578063fb7ae3c2146104f65761018d565b8063d539139314610436578063d547741f14610454578063d6bd8727146104705761018d565b806391d14854146103785780639896233b146103a8578063a217fddf146103c4578063a22cb465146103e2578063ae2b611c146103fe578063d0ee9d731461041a5761018d565b80632eb2c2d61161014b5780634e1273f4116101255780634e1273f4146102de578063572b6c051461030e5780636b20c4541461033e57806376420e1d1461035a5761018d565b80632eb2c2d61461028a5780632f2ff15d146102a657806336568abe146102c25761018d565b8062fdd58e1461019257806301ffc9a7146101c257806302fe5305146101f257806304e81bb01461020e5780630e89341c1461022a578063248a9ca31461025a575b600080fd5b6101ac60048036038101906101a7919061326f565b610512565b6040516101b991906132be565b60405180910390f35b6101dc60048036038101906101d79190613331565b6105da565b6040516101e99190613379565b60405180910390f35b61020c600480360381019061020791906134da565b6105ec565b005b610228600480360381019061022391906136d3565b61061d565b005b610244600480360381019061023f919061378e565b6107a4565b604051610251919061383a565b60405180910390f35b610274600480360381019061026f9190613892565b6107d8565b60405161028191906138ce565b60405180910390f35b6102a4600480360381019061029f919061398a565b6107f8565b005b6102c060048036038101906102bb9190613a59565b610899565b005b6102dc60048036038101906102d79190613a59565b6108ba565b005b6102f860048036038101906102f39190613a99565b61093d565b6040516103059190613bcf565b60405180910390f35b61032860048036038101906103239190613bf1565b610a56565b6040516103359190613379565b60405180910390f35b61035860048036038101906103539190613c1e565b610aae565b005b610362610b4b565b60405161036f91906138ce565b60405180910390f35b610392600480360381019061038d9190613a59565b610b6f565b60405161039f9190613379565b60405180910390f35b6103c260048036038101906103bd9190613ca9565b610bda565b005b6103cc610d66565b6040516103d991906138ce565b60405180910390f35b6103fc60048036038101906103f79190613d74565b610d6d565b005b61041860048036038101906104139190613bf1565b610d83565b005b610434600480360381019061042f9190613db4565b610dbe565b005b61043e610fd2565b60405161044b91906138ce565b60405180910390f35b61046e60048036038101906104699190613a59565b610ff6565b005b610478611017565b604051610485919061383a565b60405180910390f35b6104a860048036038101906104a39190613eb1565b61103f565b6040516104b59190613379565b60405180910390f35b6104d860048036038101906104d39190613ef1565b6110d3565b005b6104f460048036038101906104ef9190613f88565b611174565b005b610510600480360381019061050b9190613fdb565b611211565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610582576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057990614138565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60006105e582611486565b9050919050565b6000801b6105f981611500565b81600490816106089190614364565b50610619610614611017565b611514565b5050565b6000845111610661576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065890614482565b60405180910390fd5b60008351116106a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069c906144ee565b60405180910390fd5b60008251116106e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e09061455a565b60405180910390fd5b815183511461072d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610724906145c6565b60405180910390fd5b60016002811115610741576107406145e6565b5b816002811115610754576107536145e6565b5b0361079e57835183511461079d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610794906145c6565b60405180910390fd5b5b50505050565b606060046107b183611527565b6040516020016107c2929190614720565b6040516020818303038152906040529050919050565b600060036000838152602001908152602001600020600101549050919050565b6108006115f5565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806108465750610845856108406115f5565b61103f565b5b610885576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087c906147c1565b60405180910390fd5b6108928585858585611604565b5050505050565b6108a2826107d8565b6108ab81611500565b6108b58383611925565b505050565b6108c26115f5565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461092f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092690614853565b60405180910390fd5b6109398282611a06565b5050565b60608151835114610983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097a906148e5565b60405180910390fd5b6000835167ffffffffffffffff8111156109a05761099f6133af565b5b6040519080825280602002602001820160405280156109ce5781602001602082028036833780820191505090505b50905060005b8451811015610a4b57610a1b8582815181106109f3576109f2614905565b5b6020026020010151858381518110610a0e57610a0d614905565b5b6020026020010151610512565b828281518110610a2e57610a2d614905565b5b60200260200101818152505080610a4490614963565b90506109d4565b508091505092915050565b60007f0000000000000000000000006619b44a2e5cf39ee39e179fee5d281488b718c873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b610ab66115f5565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610afc5750610afb83610af66115f5565b61103f565b5b610b3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b32906147c1565b60405180910390fd5b610b46838383611ae8565b505050565b7f9143236d81225394f3bd65b44e6e29fdf4d7ba0773d9bb3f5cc15eb80ba3777781565b60006003600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f9143236d81225394f3bd65b44e6e29fdf4d7ba0773d9bb3f5cc15eb80ba37777610c0481611500565b6000600167ffffffffffffffff811115610c2157610c206133af565b5b604051908082528060200260200182016040528015610c4f5781602001602082028036833780820191505090505b5090508581600081518110610c6757610c66614905565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610cad8186868661061d565b60006002811115610cc157610cc06145e6565b5b836002811115610cd457610cd36145e6565b5b03610d2057610d1a8686600081518110610cf157610cf0614905565b5b602002602001015186600081518110610d0d57610d0c614905565b5b6020026020010151611db6565b50610d5f565b60016002811115610d3457610d336145e6565b5b836002811115610d4757610d466145e6565b5b03610d5d57610d57868686611ae8565b50610d5f565b505b5050505050565b6000801b81565b610d7f610d786115f5565b8383611ffc565b5050565b6000801b610d9081611500565b610dba7f9143236d81225394f3bd65b44e6e29fdf4d7ba0773d9bb3f5cc15eb80ba3777783611925565b5050565b7f9143236d81225394f3bd65b44e6e29fdf4d7ba0773d9bb3f5cc15eb80ba37777610de881611500565b610df48686868661061d565b7f832711906223d7b1424466041e692f503b3467cdb4d5dbc5f746adfc531da26d878787878787604051610e2d96959493929190614b15565b60405180910390a160006002811115610e4957610e486145e6565b5b836002811115610e5c57610e5b6145e6565b5b03610ec457610ebf8787600081518110610e7957610e78614905565b5b602002602001015187600081518110610e9557610e94614905565b5b602002602001015187600081518110610eb157610eb0614905565b5b602002602001015186612168565b610fc9565b60016002811115610ed857610ed76145e6565b5b836002811115610eeb57610eea6145e6565b5b03610f1d57610f188787600081518110610f0857610f07614905565b5b6020026020010151878786611604565b610fc9565b600280811115610f3057610f2f6145e6565b5b836002811115610f4357610f426145e6565b5b03610fc85760005b8651811015610fc257610faf88888381518110610f6b57610f6a614905565b5b6020026020010151888481518110610f8657610f85614905565b5b6020026020010151888581518110610fa157610fa0614905565b5b602002602001015187612168565b8080610fba90614963565b915050610f4b565b50610fc9565b5b50505050505050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b610fff826107d8565b61100881611500565b6110128383611a06565b505050565b6060600460405160200161102b9190614bde565b604051602081830303815290604052905090565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6110db6115f5565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061112157506111208561111b6115f5565b61103f565b5b611160576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611157906147c1565b60405180910390fd5b61116d8585858585612168565b5050505050565b61117c6115f5565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806111c257506111c1836111bc6115f5565b61103f565b5b611201576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f8906147c1565b60405180910390fd5b61120c838383611db6565b505050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661123b81611500565b7f87b8ba4f1ba2e813af31d438ace9cf4fa3f0e82e86b679cd044ae1b07276c9c58686868686604051611272959493929190614c00565b60405180910390a16112868686868661061d565b6000600281111561129a576112996145e6565b5b8360028111156112ad576112ac6145e6565b5b036113235761131e866000815181106112c9576112c8614905565b5b6020026020010151866000815181106112e5576112e4614905565b5b60200260200101518660008151811061130157611300614905565b5b602002602001015160405180602001604052806000815250612403565b611444565b60016002811115611337576113366145e6565b5b83600281111561134a576113496145e6565b5b0361138a576113858660008151811061136657611365614905565b5b60200260200101518686604051806020016040528060008152506125b3565b611444565b60028081111561139d5761139c6145e6565b5b8360028111156113b0576113af6145e6565b5b036114435760005b865181101561143d5761142a8782815181106113d7576113d6614905565b5b60200260200101518783815181106113f2576113f1614905565b5b602002602001015187848151811061140d5761140c614905565b5b602002602001015160405180602001604052806000815250612403565b808061143590614963565b9150506113b8565b50611444565b5b505050505050565b600061145733610a56565b1561146b57601436033560601c905061147a565b61147361147e565b905061147b565b5b90565b600033905090565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806114f957506114f8826127df565b5b9050919050565b6115118161150c6115f5565b6128c1565b50565b80600290816115239190614364565b5050565b60606000600161153684612946565b01905060008167ffffffffffffffff811115611555576115546133af565b5b6040519080825280601f01601f1916602001820160405280156115875781602001600182028036833780820191505090505b509050600082602001820190505b6001156115ea578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816115de576115dd614c6f565b5b04945060008503611595575b819350505050919050565b60006115ff61144c565b905090565b8151835114611648576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163f90614d10565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036116b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ae90614da2565b60405180910390fd5b60006116c16115f5565b90506116d1818787878787612a99565b60005b84518110156118825760008582815181106116f2576116f1614905565b5b60200260200101519050600085838151811061171157611710614905565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156117b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a990614e34565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118679190614e54565b925050819055505050508061187b90614963565b90506116d4565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516118f9929190614e88565b60405180910390a461190f818787878787612aa1565b61191d818787878787612aa9565b505050505050565b61192f8282610b6f565b611a025760016003600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506119a76115f5565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611a108282610b6f565b15611ae45760006003600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611a896115f5565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611b57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4e90614f31565b60405180910390fd5b8051825114611b9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9290614d10565b60405180910390fd5b6000611ba56115f5565b9050611bc581856000868660405180602001604052806000815250612a99565b60005b8351811015611d12576000848281518110611be657611be5614905565b5b602002602001015190506000848381518110611c0557611c04614905565b5b60200260200101519050600080600084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611ca6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9d90614fc3565b60405180910390fd5b81810360008085815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050508080611d0a90614963565b915050611bc8565b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611d8a929190614e88565b60405180910390a4611db081856000868660405180602001604052806000815250612aa1565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611e25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1c90614f31565b60405180910390fd5b6000611e2f6115f5565b90506000611e3c84612c80565b90506000611e4984612c80565b9050611e6983876000858560405180602001604052806000815250612a99565b600080600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905084811015611f00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef790614fc3565b60405180910390fd5b84810360008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051611fcd929190614fe3565b60405180910390a4611ff384886000868660405180602001604052806000815250612aa1565b50505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361206a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120619061507e565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161215b9190613379565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036121d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ce90614da2565b60405180910390fd5b60006121e16115f5565b905060006121ee85612c80565b905060006121fb85612c80565b905061220b838989858589612a99565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050858110156122a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229990614e34565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123579190614e54565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a6040516123d4929190614fe3565b60405180910390a46123ea848a8a86868a612aa1565b6123f8848a8a8a8a8a612cfa565b505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612472576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161246990615110565b60405180910390fd5b600061247c6115f5565b9050600061248985612c80565b9050600061249685612c80565b90506124a783600089858589612a99565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125069190614e54565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051612584929190614fe3565b60405180910390a461259b83600089858589612aa1565b6125aa83600089898989612cfa565b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612622576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161261990615110565b60405180910390fd5b8151835114612666576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161265d90614d10565b60405180910390fd5b60006126706115f5565b905061268181600087878787612a99565b60005b845181101561273a578381815181106126a05761269f614905565b5b60200260200101516000808784815181106126be576126bd614905565b5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546127209190614e54565b92505081905550808061273290614963565b915050612684565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516127b2929190614e88565b60405180910390a46127c981600087878787612aa1565b6127d881600087878787612aa9565b5050505050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806128aa57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806128ba57506128b982612ed1565b5b9050919050565b6128cb8282610b6f565b612942576128d881612f3b565b6128e68360001c6020612f68565b6040516020016128f79291906151c8565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612939919061383a565b60405180910390fd5b5050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106129a4577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161299a57612999614c6f565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106129e1576d04ee2d6d415b85acef810000000083816129d7576129d6614c6f565b5b0492506020810190505b662386f26fc100008310612a1057662386f26fc100008381612a0657612a05614c6f565b5b0492506010810190505b6305f5e1008310612a39576305f5e1008381612a2f57612a2e614c6f565b5b0492506008810190505b6127108310612a5e576127108381612a5457612a53614c6f565b5b0492506004810190505b60648310612a815760648381612a7757612a76614c6f565b5b0492506002810190505b600a8310612a90576001810190505b80915050919050565b505050505050565b505050505050565b612ac88473ffffffffffffffffffffffffffffffffffffffff166131a4565b15612c78578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612b0e959493929190615202565b6020604051808303816000875af1925050508015612b4a57506040513d601f19601f82011682018060405250810190612b47919061527f565b60015b612bef57612b566152b9565b806308c379a003612bb25750612b6a6152db565b80612b755750612bb4565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ba9919061383a565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612be6906153dd565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612c76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6d9061546f565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff811115612c9f57612c9e6133af565b5b604051908082528060200260200182016040528015612ccd5781602001602082028036833780820191505090505b5090508281600081518110612ce557612ce4614905565b5b60200260200101818152505080915050919050565b612d198473ffffffffffffffffffffffffffffffffffffffff166131a4565b15612ec9578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612d5f95949392919061548f565b6020604051808303816000875af1925050508015612d9b57506040513d601f19601f82011682018060405250810190612d98919061527f565b60015b612e4057612da76152b9565b806308c379a003612e035750612dbb6152db565b80612dc65750612e05565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dfa919061383a565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e37906153dd565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612ec7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ebe9061546f565b60405180910390fd5b505b505050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6060612f618273ffffffffffffffffffffffffffffffffffffffff16601460ff16612f68565b9050919050565b606060006002836002612f7b91906154e9565b612f859190614e54565b67ffffffffffffffff811115612f9e57612f9d6133af565b5b6040519080825280601f01601f191660200182016040528015612fd05781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061300857613007614905565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061306c5761306b614905565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026130ac91906154e9565b6130b69190614e54565b90505b6001811115613156577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106130f8576130f7614905565b5b1a60f81b82828151811061310f5761310e614905565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061314f9061552b565b90506130b9565b506000841461319a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613191906155a0565b60405180910390fd5b8091505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613206826131db565b9050919050565b613216816131fb565b811461322157600080fd5b50565b6000813590506132338161320d565b92915050565b6000819050919050565b61324c81613239565b811461325757600080fd5b50565b60008135905061326981613243565b92915050565b60008060408385031215613286576132856131d1565b5b600061329485828601613224565b92505060206132a58582860161325a565b9150509250929050565b6132b881613239565b82525050565b60006020820190506132d360008301846132af565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61330e816132d9565b811461331957600080fd5b50565b60008135905061332b81613305565b92915050565b600060208284031215613347576133466131d1565b5b60006133558482850161331c565b91505092915050565b60008115159050919050565b6133738161335e565b82525050565b600060208201905061338e600083018461336a565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6133e78261339e565b810181811067ffffffffffffffff82111715613406576134056133af565b5b80604052505050565b60006134196131c7565b905061342582826133de565b919050565b600067ffffffffffffffff821115613445576134446133af565b5b61344e8261339e565b9050602081019050919050565b82818337600083830152505050565b600061347d6134788461342a565b61340f565b90508281526020810184848401111561349957613498613399565b5b6134a484828561345b565b509392505050565b600082601f8301126134c1576134c0613394565b5b81356134d184826020860161346a565b91505092915050565b6000602082840312156134f0576134ef6131d1565b5b600082013567ffffffffffffffff81111561350e5761350d6131d6565b5b61351a848285016134ac565b91505092915050565b600067ffffffffffffffff82111561353e5761353d6133af565b5b602082029050602081019050919050565b600080fd5b600061356761356284613523565b61340f565b9050808382526020820190506020840283018581111561358a5761358961354f565b5b835b818110156135b3578061359f8882613224565b84526020840193505060208101905061358c565b5050509392505050565b600082601f8301126135d2576135d1613394565b5b81356135e2848260208601613554565b91505092915050565b600067ffffffffffffffff821115613606576136056133af565b5b602082029050602081019050919050565b600061362a613625846135eb565b61340f565b9050808382526020820190506020840283018581111561364d5761364c61354f565b5b835b818110156136765780613662888261325a565b84526020840193505060208101905061364f565b5050509392505050565b600082601f83011261369557613694613394565b5b81356136a5848260208601613617565b91505092915050565b600381106136bb57600080fd5b50565b6000813590506136cd816136ae565b92915050565b600080600080608085870312156136ed576136ec6131d1565b5b600085013567ffffffffffffffff81111561370b5761370a6131d6565b5b613717878288016135bd565b945050602085013567ffffffffffffffff811115613738576137376131d6565b5b61374487828801613680565b935050604085013567ffffffffffffffff811115613765576137646131d6565b5b61377187828801613680565b9250506060613782878288016136be565b91505092959194509250565b6000602082840312156137a4576137a36131d1565b5b60006137b28482850161325a565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156137f55780820151818401526020810190506137da565b60008484015250505050565b600061380c826137bb565b61381681856137c6565b93506138268185602086016137d7565b61382f8161339e565b840191505092915050565b600060208201905081810360008301526138548184613801565b905092915050565b6000819050919050565b61386f8161385c565b811461387a57600080fd5b50565b60008135905061388c81613866565b92915050565b6000602082840312156138a8576138a76131d1565b5b60006138b68482850161387d565b91505092915050565b6138c88161385c565b82525050565b60006020820190506138e360008301846138bf565b92915050565b600067ffffffffffffffff821115613904576139036133af565b5b61390d8261339e565b9050602081019050919050565b600061392d613928846138e9565b61340f565b90508281526020810184848401111561394957613948613399565b5b61395484828561345b565b509392505050565b600082601f83011261397157613970613394565b5b813561398184826020860161391a565b91505092915050565b600080600080600060a086880312156139a6576139a56131d1565b5b60006139b488828901613224565b95505060206139c588828901613224565b945050604086013567ffffffffffffffff8111156139e6576139e56131d6565b5b6139f288828901613680565b935050606086013567ffffffffffffffff811115613a1357613a126131d6565b5b613a1f88828901613680565b925050608086013567ffffffffffffffff811115613a4057613a3f6131d6565b5b613a4c8882890161395c565b9150509295509295909350565b60008060408385031215613a7057613a6f6131d1565b5b6000613a7e8582860161387d565b9250506020613a8f85828601613224565b9150509250929050565b60008060408385031215613ab057613aaf6131d1565b5b600083013567ffffffffffffffff811115613ace57613acd6131d6565b5b613ada858286016135bd565b925050602083013567ffffffffffffffff811115613afb57613afa6131d6565b5b613b0785828601613680565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613b4681613239565b82525050565b6000613b588383613b3d565b60208301905092915050565b6000602082019050919050565b6000613b7c82613b11565b613b868185613b1c565b9350613b9183613b2d565b8060005b83811015613bc2578151613ba98882613b4c565b9750613bb483613b64565b925050600181019050613b95565b5085935050505092915050565b60006020820190508181036000830152613be98184613b71565b905092915050565b600060208284031215613c0757613c066131d1565b5b6000613c1584828501613224565b91505092915050565b600080600060608486031215613c3757613c366131d1565b5b6000613c4586828701613224565b935050602084013567ffffffffffffffff811115613c6657613c656131d6565b5b613c7286828701613680565b925050604084013567ffffffffffffffff811115613c9357613c926131d6565b5b613c9f86828701613680565b9150509250925092565b60008060008060808587031215613cc357613cc26131d1565b5b6000613cd187828801613224565b945050602085013567ffffffffffffffff811115613cf257613cf16131d6565b5b613cfe87828801613680565b935050604085013567ffffffffffffffff811115613d1f57613d1e6131d6565b5b613d2b87828801613680565b9250506060613d3c878288016136be565b91505092959194509250565b613d518161335e565b8114613d5c57600080fd5b50565b600081359050613d6e81613d48565b92915050565b60008060408385031215613d8b57613d8a6131d1565b5b6000613d9985828601613224565b9250506020613daa85828601613d5f565b9150509250929050565b60008060008060008060c08789031215613dd157613dd06131d1565b5b6000613ddf89828a01613224565b965050602087013567ffffffffffffffff811115613e0057613dff6131d6565b5b613e0c89828a016135bd565b955050604087013567ffffffffffffffff811115613e2d57613e2c6131d6565b5b613e3989828a01613680565b945050606087013567ffffffffffffffff811115613e5a57613e596131d6565b5b613e6689828a01613680565b9350506080613e7789828a016136be565b92505060a087013567ffffffffffffffff811115613e9857613e976131d6565b5b613ea489828a0161395c565b9150509295509295509295565b60008060408385031215613ec857613ec76131d1565b5b6000613ed685828601613224565b9250506020613ee785828601613224565b9150509250929050565b600080600080600060a08688031215613f0d57613f0c6131d1565b5b6000613f1b88828901613224565b9550506020613f2c88828901613224565b9450506040613f3d8882890161325a565b9350506060613f4e8882890161325a565b925050608086013567ffffffffffffffff811115613f6f57613f6e6131d6565b5b613f7b8882890161395c565b9150509295509295909350565b600080600060608486031215613fa157613fa06131d1565b5b6000613faf86828701613224565b9350506020613fc08682870161325a565b9250506040613fd18682870161325a565b9150509250925092565b600080600080600060a08688031215613ff757613ff66131d1565b5b600086013567ffffffffffffffff811115614015576140146131d6565b5b614021888289016135bd565b955050602086013567ffffffffffffffff811115614042576140416131d6565b5b61404e88828901613680565b945050604086013567ffffffffffffffff81111561406f5761406e6131d6565b5b61407b88828901613680565b935050606061408c888289016136be565b925050608086013567ffffffffffffffff8111156140ad576140ac6131d6565b5b6140b98882890161395c565b9150509295509295909350565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b6000614122602a836137c6565b915061412d826140c6565b604082019050919050565b6000602082019050818103600083015261415181614115565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061419f57607f821691505b6020821081036141b2576141b1614158565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261421a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826141dd565b61422486836141dd565b95508019841693508086168417925050509392505050565b6000819050919050565b600061426161425c61425784613239565b61423c565b613239565b9050919050565b6000819050919050565b61427b83614246565b61428f61428782614268565b8484546141ea565b825550505050565b600090565b6142a4614297565b6142af818484614272565b505050565b5b818110156142d3576142c860008261429c565b6001810190506142b5565b5050565b601f821115614318576142e9816141b8565b6142f2846141cd565b81016020851015614301578190505b61431561430d856141cd565b8301826142b4565b50505b505050565b600082821c905092915050565b600061433b6000198460080261431d565b1980831691505092915050565b6000614354838361432a565b9150826002028217905092915050565b61436d826137bb565b67ffffffffffffffff811115614386576143856133af565b5b6143908254614187565b61439b8282856142d7565b600060209050601f8311600181146143ce57600084156143bc578287015190505b6143c68582614348565b86555061442e565b601f1984166143dc866141b8565b60005b82811015614404578489015182556001820191506020850194506020810190506143df565b86831015614421578489015161441d601f89168261432a565b8355505b6001600288020188555050505b505050505050565b7f706172616d206572726f723a206163636f756e7473206973206e756c6c000000600082015250565b600061446c601d836137c6565b915061447782614436565b602082019050919050565b6000602082019050818103600083015261449b8161445f565b9050919050565b7f706172616d206572726f723a20696473206973206e756c6c0000000000000000600082015250565b60006144d86018836137c6565b91506144e3826144a2565b602082019050919050565b60006020820190508181036000830152614507816144cb565b9050919050565b7f706172616d206572726f723a20616d6f756e7473206973206e756c6c00000000600082015250565b6000614544601c836137c6565b915061454f8261450e565b602082019050919050565b6000602082019050818103600083015261457381614537565b9050919050565b7f706172616d206572726f723a2061727279206973206572726f72000000000000600082015250565b60006145b0601a836137c6565b91506145bb8261457a565b602082019050919050565b600060208201905081810360008301526145df816145a3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600081905092915050565b6000815461462d81614187565b6146378186614615565b9450600182166000811461465257600181146146675761469a565b60ff198316865281151582028601935061469a565b614670856141b8565b60005b8381101561469257815481890152600182019150602081019050614673565b838801955050505b50505092915050565b60006146ae826137bb565b6146b88185614615565b93506146c88185602086016137d7565b80840191505092915050565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000600082015250565b600061470a600583614615565b9150614715826146d4565b600582019050919050565b600061472c8285614620565b915061473882846146a3565b9150614743826146fd565b91508190509392505050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206f7220617070726f766564000000000000000000000000000000000000602082015250565b60006147ab602e836137c6565b91506147b68261474f565b604082019050919050565b600060208201905081810360008301526147da8161479e565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b600061483d602f836137c6565b9150614848826147e1565b604082019050919050565b6000602082019050818103600083015261486c81614830565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b60006148cf6029836137c6565b91506148da82614873565b604082019050919050565b600060208201905081810360008301526148fe816148c2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061496e82613239565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036149a05761499f614934565b5b600182019050919050565b6149b4816131fb565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6149ef816131fb565b82525050565b6000614a0183836149e6565b60208301905092915050565b6000602082019050919050565b6000614a25826149ba565b614a2f81856149c5565b9350614a3a836149d6565b8060005b83811015614a6b578151614a5288826149f5565b9750614a5d83614a0d565b925050600181019050614a3e565b5085935050505092915050565b60038110614a8957614a886145e6565b5b50565b6000819050614a9a82614a78565b919050565b6000614aaa82614a8c565b9050919050565b614aba81614a9f565b82525050565b600081519050919050565b600082825260208201905092915050565b6000614ae782614ac0565b614af18185614acb565b9350614b018185602086016137d7565b614b0a8161339e565b840191505092915050565b600060c082019050614b2a60008301896149ab565b8181036020830152614b3c8188614a1a565b90508181036040830152614b508187613b71565b90508181036060830152614b648186613b71565b9050614b736080830185614ab1565b81810360a0830152614b858184614adc565b9050979650505050505050565b7f7b69647d2e6a736f6e0000000000000000000000000000000000000000000000600082015250565b6000614bc8600983614615565b9150614bd382614b92565b600982019050919050565b6000614bea8284614620565b9150614bf582614bbb565b915081905092915050565b600060a0820190508181036000830152614c1a8188614a1a565b90508181036020830152614c2e8187613b71565b90508181036040830152614c428186613b71565b9050614c516060830185614ab1565b8181036080830152614c638184614adc565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000614cfa6028836137c6565b9150614d0582614c9e565b604082019050919050565b60006020820190508181036000830152614d2981614ced565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000614d8c6025836137c6565b9150614d9782614d30565b604082019050919050565b60006020820190508181036000830152614dbb81614d7f565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000614e1e602a836137c6565b9150614e2982614dc2565b604082019050919050565b60006020820190508181036000830152614e4d81614e11565b9050919050565b6000614e5f82613239565b9150614e6a83613239565b9250828201905080821115614e8257614e81614934565b5b92915050565b60006040820190508181036000830152614ea28185613b71565b90508181036020830152614eb68184613b71565b90509392505050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000614f1b6023836137c6565b9150614f2682614ebf565b604082019050919050565b60006020820190508181036000830152614f4a81614f0e565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b6000614fad6024836137c6565b9150614fb882614f51565b604082019050919050565b60006020820190508181036000830152614fdc81614fa0565b9050919050565b6000604082019050614ff860008301856132af565b61500560208301846132af565b9392505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b60006150686029836137c6565b91506150738261500c565b604082019050919050565b600060208201905081810360008301526150978161505b565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006150fa6021836137c6565b91506151058261509e565b604082019050919050565b60006020820190508181036000830152615129816150ed565b9050919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000615166601783614615565b915061517182615130565b601782019050919050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006151b2601183614615565b91506151bd8261517c565b601182019050919050565b60006151d382615159565b91506151df82856146a3565b91506151ea826151a5565b91506151f682846146a3565b91508190509392505050565b600060a08201905061521760008301886149ab565b61522460208301876149ab565b81810360408301526152368186613b71565b9050818103606083015261524a8185613b71565b9050818103608083015261525e8184614adc565b90509695505050505050565b60008151905061527981613305565b92915050565b600060208284031215615295576152946131d1565b5b60006152a38482850161526a565b91505092915050565b60008160e01c9050919050565b600060033d11156152d85760046000803e6152d56000516152ac565b90505b90565b600060443d10615368576152ed6131c7565b60043d036004823e80513d602482011167ffffffffffffffff82111715615315575050615368565b808201805167ffffffffffffffff8111156153335750505050615368565b80602083010160043d038501811115615350575050505050615368565b61535f826020018501866133de565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b60006153c76034836137c6565b91506153d28261536b565b604082019050919050565b600060208201905081810360008301526153f6816153ba565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b60006154596028836137c6565b9150615464826153fd565b604082019050919050565b600060208201905081810360008301526154888161544c565b9050919050565b600060a0820190506154a460008301886149ab565b6154b160208301876149ab565b6154be60408301866132af565b6154cb60608301856132af565b81810360808301526154dd8184614adc565b90509695505050505050565b60006154f482613239565b91506154ff83613239565b925082820261550d81613239565b9150828204841483151761552457615523614934565b5b5092915050565b600061553682613239565b91506000820361554957615548614934565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b600061558a6020836137c6565b915061559582615554565b602082019050919050565b600060208201905081810360008301526155b98161557d565b905091905056fea264697066735822122080ad27a391e2ab022b7fdd007e5af614cedcd8dce03f0ab0dd6970254d1ca0c864736f6c63430008120033";

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_MINTER_ROLE = "MINTER_ROLE";

    public static final String FUNC_TRANSFER = "TRANSFER";

    public static final String FUNC__PARAMCHECK = "_paramCheck";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_BURNBATCH = "burnBatch";

    public static final String FUNC_EXCHANGEBURN = "exchangeBurn";

    public static final String FUNC_EXCHANGEMINT = "exchangeMint";

    public static final String FUNC_EXCHANGETRANSFER = "exchangeTransfer";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETTRANSFER = "setTransfer";

    public static final String FUNC_SETURI = "setURI";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_URI = "uri";

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event MINTLOG_EVENT = new Event("MintLog",
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Uint8>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event TRANSFERLOG_EVENT = new Event("TransferLog",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Uint8>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event URI_EVENT = new Event("URI",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected Common1155Contract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Common1155Contract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Common1155Contract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Common1155Contract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public  List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public  List<MintLogEventResponse> getMintLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MINTLOG_EVENT, transactionReceipt);
        ArrayList<MintLogEventResponse> responses = new ArrayList<MintLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MintLogEventResponse typedResponse = new MintLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.param0 = (List<String>) ((Array) eventValues.getNonIndexedValues().get(0)).getValue();
            typedResponse.param1 = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getValue();
            typedResponse.param2 = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(2)).getValue();
            typedResponse.param3 = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.param4 = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MintLogEventResponse> mintLogEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MintLogEventResponse>() {
            @Override
            public MintLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MINTLOG_EVENT, log);
                MintLogEventResponse typedResponse = new MintLogEventResponse();
                typedResponse.log = log;
                typedResponse.param0 = (List<String>) ((Array) eventValues.getNonIndexedValues().get(0)).getValue();
                typedResponse.param1 = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getValue();
                typedResponse.param2 = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(2)).getValue();
                typedResponse.param3 = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.param4 = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MintLogEventResponse> mintLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINTLOG_EVENT));
        return mintLogEventFlowable(filter);
    }

    public  List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses = new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleAdminChangedEventResponse>() {
            @Override
            public RoleAdminChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
                RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADMINCHANGED_EVENT));
        return roleAdminChangedEventFlowable(filter);
    }

    public  List<RoleGrantedEventResponse> getRoleGrantedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleGrantedEventResponse>() {
            @Override
            public RoleGrantedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEGRANTED_EVENT, log);
                RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEGRANTED_EVENT));
        return roleGrantedEventFlowable(filter);
    }

    public  List<RoleRevokedEventResponse> getRoleRevokedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleRevokedEventResponse>() {
            @Override
            public RoleRevokedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEREVOKED_EVENT, log);
                RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREVOKED_EVENT));
        return roleRevokedEventFlowable(filter);
    }

    public  List<TransferBatchEventResponse> getTransferBatchEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
        ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ids = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getValue();
            typedResponse.values = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferBatchEventResponse>() {
            @Override
            public TransferBatchEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERBATCH_EVENT, log);
                TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.ids = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getValue();
                typedResponse.values = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERBATCH_EVENT));
        return transferBatchEventFlowable(filter);
    }

    public  List<TransferLogEventResponse> getTransferLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERLOG_EVENT, transactionReceipt);
        ArrayList<TransferLogEventResponse> responses = new ArrayList<TransferLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferLogEventResponse typedResponse = new TransferLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.param0 = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.param1 = (List<String>) ((Array) eventValues.getNonIndexedValues().get(1)).getValue();
            typedResponse.param2 = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(2)).getValue();
            typedResponse.param3 = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(3)).getValue();
            typedResponse.param4 = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferLogEventResponse> transferLogEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferLogEventResponse>() {
            @Override
            public TransferLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERLOG_EVENT, log);
                TransferLogEventResponse typedResponse = new TransferLogEventResponse();
                typedResponse.log = log;
                typedResponse.param0 = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.param1 = (List<String>) ((Array) eventValues.getNonIndexedValues().get(1)).getValue();
                typedResponse.param2 = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(2)).getValue();
                typedResponse.param3 = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(3)).getValue();
                typedResponse.param4 = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferLogEventResponse> transferLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERLOG_EVENT));
        return transferLogEventFlowable(filter);
    }

    public  List<TransferSingleEventResponse> getTransferSingleEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, transactionReceipt);
        ArrayList<TransferSingleEventResponse> responses = new ArrayList<TransferSingleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferSingleEventResponse>() {
            @Override
            public TransferSingleEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, log);
                TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERSINGLE_EVENT));
        return transferSingleEventFlowable(filter);
    }

    public  List<URIEventResponse> getURIEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(URI_EVENT, transactionReceipt);
        ArrayList<URIEventResponse> responses = new ArrayList<URIEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            URIEventResponse typedResponse = new URIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<URIEventResponse> uRIEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, URIEventResponse>() {
            @Override
            public URIEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(URI_EVENT, log);
                URIEventResponse typedResponse = new URIEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<URIEventResponse> uRIEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(URI_EVENT));
        return uRIEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DEFAULT_ADMIN_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEFAULT_ADMIN_ROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> MINTER_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINTER_ROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> TRANSFER() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TRANSFER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account, BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account),
                        new org.web3j.abi.datatypes.generated.Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> balanceOfBatch(List<String> accounts, List<BigInteger> ids) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOFBATCH,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                                org.web3j.abi.datatypes.Address.class,
                                org.web3j.abi.Utils.typeMap(accounts, org.web3j.abi.datatypes.Address.class)),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                                org.web3j.abi.datatypes.generated.Uint256.class,
                                org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> burn(String account, BigInteger id, BigInteger value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account),
                        new org.web3j.abi.datatypes.generated.Uint256(id),
                        new org.web3j.abi.datatypes.generated.Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burnBatch(String account, List<BigInteger> ids, List<BigInteger> values) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURNBATCH,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                                org.web3j.abi.datatypes.generated.Uint256.class,
                                org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                                org.web3j.abi.datatypes.generated.Uint256.class,
                                org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> exchangeBurn(String from, List<BigInteger> ids, List<BigInteger> amounts, BigInteger txType) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_EXCHANGEBURN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                                org.web3j.abi.datatypes.generated.Uint256.class,
                                org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                                org.web3j.abi.datatypes.generated.Uint256.class,
                                org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint256.class)),
                        new org.web3j.abi.datatypes.generated.Uint8(txType)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> exchangeMint(List<String> tos, List<BigInteger> ids, List<BigInteger> amounts, BigInteger txType, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_EXCHANGEMINT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                                org.web3j.abi.datatypes.Address.class,
                                org.web3j.abi.Utils.typeMap(tos, org.web3j.abi.datatypes.Address.class)),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                                org.web3j.abi.datatypes.generated.Uint256.class,
                                org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                                org.web3j.abi.datatypes.generated.Uint256.class,
                                org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint256.class)),
                        new org.web3j.abi.datatypes.generated.Uint8(txType),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> exchangeTransfer(String from, List<String> tos, List<BigInteger> ids, List<BigInteger> amounts, BigInteger txType, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_EXCHANGETRANSFER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                                org.web3j.abi.datatypes.Address.class,
                                org.web3j.abi.Utils.typeMap(tos, org.web3j.abi.datatypes.Address.class)),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                                org.web3j.abi.datatypes.generated.Uint256.class,
                                org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                                org.web3j.abi.datatypes.generated.Uint256.class,
                                org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint256.class)),
                        new org.web3j.abi.datatypes.generated.Uint8(txType),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> getRoleAdmin(byte[] role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEADMIN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> grantRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GRANTROLE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role),
                        new org.web3j.abi.datatypes.Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> hasRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASROLE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role),
                        new org.web3j.abi.datatypes.Address(160, account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String account, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account),
                        new org.web3j.abi.datatypes.Address(160, operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEROLE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role),
                        new org.web3j.abi.datatypes.Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEROLE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role),
                        new org.web3j.abi.datatypes.Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeBatchTransferFrom(String from, String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEBATCHTRANSFERFROM,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from),
                        new org.web3j.abi.datatypes.Address(160, to),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                                org.web3j.abi.datatypes.generated.Uint256.class,
                                org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                                org.web3j.abi.datatypes.generated.Uint256.class,
                                org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint256.class)),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger id, BigInteger amount, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFERFROM,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from),
                        new org.web3j.abi.datatypes.Address(160, to),
                        new org.web3j.abi.datatypes.generated.Uint256(id),
                        new org.web3j.abi.datatypes.generated.Uint256(amount),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator),
                        new org.web3j.abi.datatypes.Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTransfer(String transferAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTRANSFER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, transferAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setURI(String newuri) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETURI,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(newuri)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> uri(BigInteger _tokenid) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_URI,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static Common1155Contract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Common1155Contract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Common1155Contract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Common1155Contract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Common1155Contract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Common1155Contract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Common1155Contract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Common1155Contract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Common1155Contract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Common1155Contract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Common1155Contract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Common1155Contract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Common1155Contract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Common1155Contract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Common1155Contract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Common1155Contract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String account;

        public String operator;

        public Boolean approved;
    }

    public static class MintLogEventResponse extends BaseEventResponse {
        public List<String> param0;

        public List<BigInteger> param1;

        public List<BigInteger> param2;

        public BigInteger param3;

        public byte[] param4;
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class TransferBatchEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public List<BigInteger> ids;

        public List<BigInteger> values;
    }

    public static class TransferLogEventResponse extends BaseEventResponse {
        public String param0;

        public List<String> param1;

        public List<BigInteger> param2;

        public List<BigInteger> param3;

        public BigInteger param4;

        public byte[] data;
    }

    public static class TransferSingleEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public BigInteger id;

        public BigInteger value;
    }

    public static class URIEventResponse extends BaseEventResponse {
        public BigInteger id;

        public String value;
    }
}
